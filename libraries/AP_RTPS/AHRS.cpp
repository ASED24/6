/*
 * Copyright (C) 2016 Intel Corporation. All rights reserved.
 *
 * Based on a file auto-generated by the fastcdrgen tool with the following
 * Copyright and license:
 * Copyright (C) 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "AHRS.h"

#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

#include <utility>

AHRS::AHRS()
{
    m_roll = 0.0;
    m_pitch = 0.0;
    m_yaw = 0.0;
    m_roll_pitch_error = 0.0;
    m_yaw_error = 0.0;
}

AHRS::~AHRS()
{
}

AHRS::AHRS(const AHRS& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_roll_pitch_error = x.m_roll_pitch_error;
    m_yaw_error = x.m_yaw_error;
    m_gyro = x.m_gyro;
}

AHRS::AHRS(AHRS&& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_roll_pitch_error = x.m_roll_pitch_error;
    m_yaw_error = x.m_yaw_error;
    m_gyro = std::move(x.m_gyro);
}

AHRS& AHRS::operator=(const AHRS& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_roll_pitch_error = x.m_roll_pitch_error;
    m_yaw_error = x.m_yaw_error;
    m_gyro = x.m_gyro;

    return *this;
}

AHRS& AHRS::operator=(AHRS&& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_roll_pitch_error = x.m_roll_pitch_error;
    m_yaw_error = x.m_yaw_error;
    m_gyro = std::move(x.m_gyro);

    return *this;
}

size_t AHRS::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

void AHRS::serialize(eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_roll;

    scdr << m_pitch;

    scdr << m_yaw;

    scdr << m_roll_pitch_error;

    scdr << m_yaw_error;

    scdr << m_gyro;
}

void AHRS::deserialize(eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_roll;
    dcdr >> m_pitch;
    dcdr >> m_yaw;
    dcdr >> m_roll_pitch_error;
    dcdr >> m_yaw_error;
    dcdr >> m_gyro;
}

size_t AHRS::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool AHRS::isKeyDefined()
{
    return false;
}

void AHRS::serializeKey(eprosima::fastcdr::Cdr& scdr) const
{
}
