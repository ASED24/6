/*
 * Copyright (C) 2016 Intel Corporation. All rights reserved.
 *
 * Based on a file auto-generated by the fastcdrgen tool with the following
 * Copyright and license:
 * Copyright (C) 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <array>
#include <stdint.h>
#include <string>
#include <vector>

namespace eprosima {
namespace fastcdr {
    class Cdr;
}
}

class WaypointNED {
public:
    WaypointNED();
    ~WaypointNED();

    WaypointNED(const WaypointNED& x);
    WaypointNED(WaypointNED&& x);

    WaypointNED& operator=(const WaypointNED& x);

    WaypointNED& operator=(WaypointNED&& x);

    inline void latitude(int64_t _latitude)
    {
        m_latitude = _latitude;
    }

    inline int64_t latitude() const
    {
        return m_latitude;
    }

    inline int64_t& latitude()
    {
        return m_latitude;
    }
    inline void longitude(int64_t _longitude)
    {
        m_longitude = _longitude;
    }

    inline int64_t longitude() const
    {
        return m_longitude;
    }

    inline int64_t& longitude()
    {
        return m_longitude;
    }
    inline void altitude(int64_t _altitude)
    {
        m_altitude = _altitude;
    }

    inline int64_t altitude() const
    {
        return m_altitude;
    }

    inline int64_t& altitude()
    {
        return m_altitude;
    }

    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    void serialize(eprosima::fastcdr::Cdr& cdr) const;

    void deserialize(eprosima::fastcdr::Cdr& cdr);

    static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    static bool isKeyDefined();

    void serializeKey(eprosima::fastcdr::Cdr& cdr) const;

private:
    int64_t m_latitude;
    int64_t m_longitude;
    int64_t m_altitude;
};
