/*
 * Copyright (C) 2016 Intel Corporation. All rights reserved.
 *
 * Based on a file auto-generated by the fastcdrgen tool with the following
 * Copyright and license:
 * Copyright (C) 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <array>
#include <stdint.h>
#include <string>
#include <vector>

namespace eprosima {
namespace fastcdr {
    class Cdr;
}
}

class AHRS {
public:
    AHRS();
    ~AHRS();

    AHRS(const AHRS& x);
    AHRS(AHRS&& x);

    AHRS& operator=(const AHRS& x);
    AHRS& operator=(AHRS&& x);

    inline void roll(float _roll) { m_roll = _roll; }
    inline float roll() const { return m_roll; }
    inline float& roll() { return m_roll; }

    inline void pitch(float _pitch) { m_pitch = _pitch; }
    inline float pitch() const { return m_pitch; }
    inline float& pitch() { return m_pitch; }

    inline void yaw(float _yaw) { m_yaw = _yaw; }
    inline float yaw() const { return m_yaw; }
    inline float& yaw() { return m_yaw; }

    inline void roll_pitch_error(float _roll_pitch_error)
    {
        m_roll_pitch_error = _roll_pitch_error;
    }
    inline float roll_pitch_error() const
    {
        return m_roll_pitch_error;
    }
    inline float& roll_pitch_error()
    {
        return m_roll_pitch_error;
    }

    inline void yaw_error(float _yaw_error) { m_yaw_error = _yaw_error; }
    inline float yaw_error() const { return m_yaw_error; }
    inline float& yaw_error() { return m_yaw_error; }

    inline void gyro(const std::array<float, 3>& _gyro) { m_gyro = _gyro; }
    inline void gyro(std::array<float, 3>&& _gyro) {
        m_gyro = std::move(_gyro);
    }
    inline const std::array<float, 3>& gyro() const { return m_gyro; }
    inline std::array<float, 3>& gyro() { return m_gyro; }

    static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);
    void serialize(eprosima::fastcdr::Cdr& cdr) const;
    void deserialize(eprosima::fastcdr::Cdr& cdr);
    static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    static bool isKeyDefined();
    void serializeKey(eprosima::fastcdr::Cdr& cdr) const;

private:
    float m_roll;
    float m_pitch;
    float m_yaw;
    float m_roll_pitch_error;
    float m_yaw_error;
    std::array<float, 3> m_gyro;
};

#include "RTPSPublisher.h"
#include "RTPSPubSubType.h"
extern template class RTPSIsolatedPublisher<AHRS>;
extern template class RTPSPubSubType<AHRS>;
