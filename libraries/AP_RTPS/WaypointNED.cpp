/*
 * Copyright (C) 2016 Intel Corporation. All rights reserved.
 *
 * Based on a file auto-generated by the fastcdrgen tool with the following
 * Copyright and license:
 * Copyright (C) 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "WaypointNED.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

WaypointNED::WaypointNED()
{
    m_latitude = 0;
    m_longitude = 0;
    m_altitude = 0;
}

WaypointNED::~WaypointNED()
{
}

WaypointNED::WaypointNED(const WaypointNED& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
}

WaypointNED::WaypointNED(WaypointNED&& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;
}

WaypointNED& WaypointNED::operator=(const WaypointNED& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;

    return *this;
}

WaypointNED& WaypointNED::operator=(WaypointNED&& x)
{
    m_latitude = x.m_latitude;
    m_longitude = x.m_longitude;
    m_altitude = x.m_altitude;

    return *this;
}

size_t WaypointNED::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

void WaypointNED::serialize(eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_latitude;

    scdr << m_longitude;

    scdr << m_altitude;
}

void WaypointNED::deserialize(eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_latitude;
    dcdr >> m_longitude;
    dcdr >> m_altitude;
}

size_t WaypointNED::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool WaypointNED::isKeyDefined()
{
    return false;
}

void WaypointNED::serializeKey(eprosima::fastcdr::Cdr& scdr) const
{
}