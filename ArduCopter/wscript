#!/usr/bin/env python
# encoding: utf-8

def options(opt):
    g = opt.add_option_group('Copter configure options')

    frame_type_choices = (
        'quad', 'tri', 'hexa', 'y6', 'octa', 'octa-quad', 'heli', 'single',
        'coax',
    )

    g.add_option(
        '--copter-frame-type',
        action='store',
        choices=frame_type_choices,
        default='quad',
        help='Copter frame type. Choices are: %s' % ', '.join(frame_type_choices),
    )

def configure(cfg):
    frame = cfg.options.copter_frame_type
    cfg.msg('Copter frame type', frame)
    cfg.env.COPTER_FRAME_CONFIG = frame.upper().replace('-', '_') + '_FRAME'

def build(bld):
    vehicle = bld.path.name
    bld.ap_stlib(
        name=vehicle + '_libs',
        vehicle=vehicle,
        libraries=bld.ap_common_vehicle_libraries() + [
            'AP_ADSB',
            'AC_AttitudeControl',
            'AC_Fence',
            'AC_PID',
            'AC_PrecLand',
            'AC_Sprayer',
            'AC_WPNav',
            'AP_Camera',
            'AP_EPM',
            'AP_Frsky_Telem',
            'AP_IRLock',
            'AP_InertialNav',
            'AP_LandingGear',
            'AP_Menu',
            'AP_Motors',
            'AP_Mount',
            'AP_Parachute',
            'AP_RCMapper',
            'AP_RPM',
            'AP_RSSI',
            'AP_Relay',
            'AP_ServoRelayEvents',
        ],
        use='mavlink',
    )

    bld.ap_program(
        program_name='arducopter',
        use=vehicle + '_libs',
        defines=['FRAME_CONFIG=%s' % bld.env.COPTER_FRAME_CONFIG],
    )
